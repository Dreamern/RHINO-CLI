name: Automated Testing

on:
  push:

  pull_request:
    branches: [ "main" ]

  workflow_dispatch:

jobs:

  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.19

    - name: Install Minikube
      run: |
        curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
        sudo install minikube-linux-amd64 /usr/local/bin/minikube

    - name: Start Minikube
      run: |
        sudo minikube start --kubernetes-version=v1.24.10 --force

    - name: Wait for Minikube
      run: |
        while [ "$(sudo minikube status --format '{{.Host}}')" != "Running" ]; do
          echo "Waiting for Minikube to start..."
          sleep 5
        done

    - name: Install Rhino Operator
      run: |
        sudo kubectl apply -f https://raw.githubusercontent.com/OpenRHINO/RHINO-Operator/main/install-rhino-operator.yaml
        echo "Waiting for RHINO Operator to start..."
        sleep 30

    - name: Build
      run: sudo make build

    - name: Configure Docker to use Minikube's Docker daemon
      run: |
        sudo minikube -p minikube docker-env | sudo tee /tmp/docker-env.sh
        sudo chmod +x /tmp/docker-env.sh

    - name: Test
      run: |
        sudo --preserve-env=GOROOT,GOPATH,DOCKER_TLS_VERIFY,DOCKER_HOST,DOCKER_CERT_PATH,MINIKUBE_ACTIVE_DOCKERD bash -c "source /tmp/docker-env.sh && go test -v ./..." | tee test_results.txt

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Install OpenAI
      run: |
        pip install openai

    - name: Analyze Test Results with GPT
      if: github.event.repository.full_name == 'OpenRHINO/RHINO-CLI'
      run: |
        echo "Writing Python script to analyze test results..."
        cat > analyze_test_results.py <<- EOM
        import openai, os

        # Set up OpenAI API client
        openai.api_key = "${{ secrets.OPENAI_API_KEY }}"

        # Get the test results
        with open("test_results.txt", "r") as f:
            lines = f.readlines()
            last_200_lines = lines[-200:]
            test_results = ''.join(last_200_lines)

        # Create a prompt for GPT
        messages = [
            {"role": "system", "content": "You are a helpful assistant that can analyze test results."},
            {"role": "user", "content": f"Please analyze the following test results: \n{test_results}"}
        ]
        # Call the OpenAI API
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=messages,
            max_tokens=100,
            temperature=0.5,
        )

        # Get the analysis text
        analysis_text = response.choices[0]['message']['content'].strip()

        # Print the analysis text to the console
        print("GPT Test Analysis:")
        print(analysis_text)
        EOM
        python3 analyze_test_results.py
